#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define MAX_TOKEN_LEN 100
#define MAX_VARS 10
#define MAX_CODE_LENGTH 100

// Token Types
typedef enum {
    T_INT, T_IDENTIFIER, T_NUMBER, T_ASSIGN,
    T_PLUS, T_MINUS, T_MULT, T_DIV,
    T_IF, T_ELSE, T_EQUAL, T_LBRACE,
    T_RBRACE, T_SEMICOLON, T_UNKNOWN, T_EOF
} TokenType;

// Token Structure
typedef struct {
    TokenType type;
    char text[MAX_TOKEN_LEN];
} Token;

// Variable Structure
typedef struct {
    char name;
    int addr;
} Variable;

Variable variables[MAX_VARS];
int varCount = 0;
int nextAddr = 100;

// Get Variable Address
int getVariableAddress(char name) {
    for (int i = 0; i < varCount; i++) {
        if (variables[i].name == name) {
            return variables[i].addr;
        }
    }
    variables[varCount].name = name;
    variables[varCount].addr = nextAddr++;
    return variables[varCount++].addr;
}

// Lexer: Get Next Token
void getNextToken(FILE *file, Token *token, FILE *tokensFile) {
    int c;
    while ((c = fgetc(file)) != EOF) {
        if (isspace(c)) continue;

        if (isalpha(c)) {
            int len = 0;
            token->text[len++] = c;
            while (isalnum(c = fgetc(file))) {
                if (len < MAX_TOKEN_LEN - 1) token->text[len++] = c;
            }
            ungetc(c, file);
            token->text[len] = '\0';

            if (strcmp(token->text, "int") == 0) token->type = T_INT;
            else if (strcmp(token->text, "if") == 0) token->type = T_IF;
            else if (strcmp(token->text, "else") == 0) token->type = T_ELSE;
            else token->type = T_IDENTIFIER;
            fprintf(tokensFile, "Token: %s\n", token->text);
            return;
        }
    }
    token->type = T_EOF;
    token->text[0] = '\0';
}

// Code Generation
void generateAssembly(const char *inputFile, const char *outputFile) {
    FILE *input = fopen(inputFile, "r");
    FILE *output = fopen(outputFile, "w");
    char line[MAX_CODE_LENGTH];

    while (fgets(line, sizeof(line), input)) {
        if (strstr(line, "int")) {
            continue;
        } else if (strstr(line, "if")) {
            char var;
            int value;
            if (sscanf(line, "if (%c == %d)", &var, &value) == 2) {
                fprintf(output, "cmp M %d %d\n", getVariableAddress(var), value);
                fprintf(output, "jne end\n");
            }
        } else if (strchr(line, '=')) {
            char var1, var2, op;
            int value;
            if (sscanf(line, "%c = %d", &var1, &value) == 2) {
                fprintf(output, "ldi A %d\n", value);
                fprintf(output, "mov M A %d\n", getVariableAddress(var1));
            } else if (sscanf(line, "%c = %c %c %c", &var1, &var2, &op, &var1) == 4) {
                fprintf(output, "mov A M %d\n", getVariableAddress(var2));
                fprintf(output, "add M %d\n", getVariableAddress(var1));
                fprintf(output, "mov M A %d\n", getVariableAddress(var1));
            }
        }
    }
    fprintf(output, "end:\nhlt\n");
    fclose(input);
    fclose(output);
}

// Main Function
int main() {
    FILE *inputFile = fopen("input.txt", "r");
    FILE *tokensFile = fopen("tokens.txt", "w");
    FILE *astFile = fopen("ast_output.txt", "w");

    if (!inputFile || !tokensFile || !astFile) {
        perror("Failed to open file");
        return 1;
    }
    
    Token token;
    getNextToken(inputFile, &token, tokensFile);
    fprintf(astFile, "AST Node: %s\n", token.text);
    
    fclose(tokensFile);
    fclose(astFile);
    fclose(inputFile);
    
    generateAssembly("input.txt", "output.asm");
    return 0;
}
